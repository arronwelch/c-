// 4.2.cpp : What Are Class Constructors and the Class Destructor?

Fibonacci fib1(7, 3);
// defines a Fibonacci class object of 7 elements beginning at position 3, and

Pell pe1(10);

// defines a Pell class object of 10 elements beginning at default position of 1. Finally,

Fibonacci fib2(fib1);

// initializes fib2 to a copy of fib1.

class Triangular {
public:
	// ...
private:
	int _length;	// number of elements
	int _beg_pos;	// beginning position of range
	int _next;		// next element to iterate over
};

Triangular tri(8, 3);

// For example, here are three possible Triangular class constructors:

class Triangular {
public:
	// overloaded set of constructors
	Triangular();	// default constructor
	Triangular(int len);
	Triangular(int len, int beg_pos);

	// ...
};

Triangular t;
// causes the default constructor to be applied to t. Similarly,

Triangular t2(10, 3);

Triangular t3 = 8;

// Surprisingly, the following does not define a Triangular class object:
Triangular t5(); // not what is seems :-)

// Rather, this defines t5 to be a function with an empty parameter list and returning a Triangular object.

Triangular t5; // ok

Triangular::Triangular()
{	// default constructor
	_length = 1;
	_beg_pos = 1;
	_next = 0;
}

class Triangular {
public:
	// also a default constructor
	Triangular(int len = 1, int bp = 1);
	// ...
};
Triangular::Triangular(int len, ine bp)
{
	// _length and _beg_pos both must be at least 1
	// best not to trust the user to always be right
	_length = len > 0 ? len : 1;
	_beg_pos = bp > 0 ? bp  : 1;
	_next = _beg_pos - 1;
}

Triangular tri1;		// Triangular::Triangular(1, 1);
Triangular tri2(12);	// Triangular::Triangular(12, 1);
Triangular tri3(8, 3);	// Triangular::Triangular(8, 3);

// The Member Initialization List
Triangular::Triangular(const Triangular &rhs)
	: _length (rhs._length),
	 _beg_pos (rhs._beg_pos), _next (rhs._beg_pos - 1)
{} // yes, empty!

class Triangular {
public:
	// ...
private:
	string _name;
	int _next, _length, _beg_pos;
};

Triangular::Triangular(int len, int bp)
	: _name("Triangualr")
{
	_length = len > 0 ? len : 1;
	_beg_pos = bp > 0 ? bp : 1;
	_next = _beg_pos - 1;
}

class Matrix {
public:
	Matrix(int row, int col)
		: _row(row), _col(col)
	{
		// constructor allocates a resource
		// note: no error checking is shown
		_pmat = new double[row * col];
	}

	~Matrix()
	{
		// destructor frees the resource
		delete [] _pmat;
	}

	// ...

private:
	int _row, _col;
	double *_pmat;
};

{
	Matirx mat(4, 4);
	// constructor applied here

	// ...
	// destructor applied here
}

// Memberwise Initialization

Triangular tri1(8);
Triangular tri2 = tri1;

{
	Matrix mat (4, 4);
	// constructor applied here
	{
		Matrix mat2 = mat;
		// default memberwise copy applied
		// ... use mat2 here
		// destructor applied here for mat2
	}
	// ... use mat here
	// destructor applied here for mat
}

mat2._pmat = mat._pmat;

Matrix::Matrix(const Matirx & rhs) {
	// what should go here?
}

Matrix::Matrix(const Matrix &rhs)
	: _row(rhs._row), _col(rhs._col)
{	// create a "deep copy" of the array addressed by rhs._pmat
	int elem_cnt = _row * _col;
	_pmat = new double[elem_cnt];

	for (int ix = 0; ix < elem_cnt; ++ix)
		_pmat[ix] = rhs._pmat[ix];
}
